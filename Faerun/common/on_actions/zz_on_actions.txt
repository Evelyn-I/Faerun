#character
on_startup = {
	events = {

	}
}

#character
on_yearly_pulse = {
	events = {
		ability_refresh.1
		ability_refresh.2
	}

	
	random_events = {
		
		# Feudal Life Events

		5000 = 0 # Chance of no yearly event

	}
}


#character
on_bi_yearly_pulse = {
	events = {

	}
	
	
	random_events = {		
		2000 = 0 # Chance of no bi-yearly event
	}
}

#character
on_five_year_pulse = {
	events = {

	}
	
	random_events = {
	}
}

#character
on_decade_pulse = {
	events = {

	}
	
	random_events = {

	}
}

# For characters 2 to 16 years old
on_yearly_childhood_pulse = {
	random_events = {
		1500 = 0
		

	}
}

# Yearly pulse (six months from on_yearly_pulse) intended for Focus events (only fires for characters with a Focus)
on_focus_pulse = {
	events = {
		#z_class_selection.1 
		
	}
	random_events = {
		5 = 0
		#1 = z_class_selection.2
		5 = z_class_selection.3
		5 = z_class_selection.1
	}
}

#on combat pulse
on_combat_pulse = {
	random_events = {
		3 = 0
	}
}

#on siege pulse
on_siege_pulse = {
	random_events = {
		200000 = 0
	}
}

# any leader in battle on winning side is ROOT - opponent army leader is FROM
on_battle_won = {
	random_events = {
		800 = 0
	}
}

# any leader in battle on winning side is ROOT - opponent army leader is FROM
on_major_battle_won = {
	events = {

	}
}

# Winning army leader is ROOT - opponent army leader is FROM
on_battle_won_leader = {
}

# Winning army leader is ROOT - opponent army leader is FROM
on_major_battle_won_leader = {
	events = {
	}
}

# Winning army owner is ROOT - opponent army owner is FROM
on_battle_won_owner = {
	events = {
	}
}

# Any leader in battle on losing side is ROOT - opponent army leader is FROM
on_battle_lost = {
	random_events = {
		700 = 0
	}
}

# Any leader in battle on losing side is ROOT - opponent army leader is FROM
on_major_battle_lost = {
	events = {
	}
}

# Losing army leader ROOT - opponent army leader is FROM
on_battle_lost_leader = {
}

# Losing army leader ROOT - opponent army leader is FROM
on_major_battle_lost_leader = {
	events = {
	}
}

# Losing army owner is ROOT - opponent army owner is FROM
on_battle_lost_owner = {
	events = {
	}
}

# The taken Holding title is in FROM.
on_siege_won_leader = {
	events = {
	}
	random_events = {
		300 = 0
	}
}

on_siege_lost_leader = {
	events = {
		# 8350 # Loses the crusade target's capital
	}
}

# Fires for the owner of the winning unit (ROOT). The taken Holding title is in FROM.
on_siege_over_winner = {
	events = {
	}
	random_events = {
		400 = 0 # Nothing happens
	}
}

# Fires for all characters presumed to be in the Holding at the time. Siege winner unit owner in the 'new_character' scope, lost holding title in FROM, local character in ROOT.
on_siege_over_loc_chars = {
	events = {
	}
	random_events = {
 		1000 = 0 # Nothing happens
 	}
}

#character
on_failed_assassination = {
	random_events = {
 	}
}

#character
on_failed_assassination_disc = {
	random_events = {
 	}
}

#character
on_assassination = {
	events = {
 	}
}

#character
on_assassination_disc = {
	events = {
 	}
}

# character
on_birth = {
	events = {
	}
	random_events = {
		200 = 0
	}
}

# character
on_adulthood = {
	events = {
	}
}

on_adolescence = { # Checked on 12th birthday.
	events = {
	}
}

# baby scope
on_post_birth = {
	events = {
	}
}

#character (at 2 months)
on_pregnancy = {
	events = {
 	}
}

#character
on_crusade_creation = {
	events = {
 	}
}

# Sent to employers of both spouses - ROOT is employer. FROM is employers "employee". new_character is the other spouse.
on_marriage = {
	events = {
 	}
	random_events = {
		2000 = 0 # No random event
	}
}

#character. Triggers when someone gets imprisoned for any reason. - ROOT is prisoner, FROM is imprisoner
on_become_imprisoned_any_reason = {
	events = {
	}
}

#character. Triggers if someone tries to imprison someone landed and fails. This leads to an automatic war declaration(independece)
on_avoided_imprison_started_war = {
	events = {
 	}
}

#character. Triggers if someone becomes imprisoned by the diplo-action - ROOT is prisoner, FROM is imprisoner
on_became_imprisoned = {
	events = {
 	}
}

#character. Triggers if someone tries to imprison someone unlanded and fails. Character is exiled to another country
on_avoided_imprison_fled_country = {
	events = {
 	}
}

#character. Triggers if someone is released from prison - ROOT is prisoner, FROM is imprisoner
on_released_from_prison = {
	events = {
 	}
}

#character. Triggers if someone is executed, character not dead yet
on_executed = {
	events = {
 	}
}

#character. Triggers if someone is exiled
on_exiled = {
	events = {
 	}
}

#character. Fires every month for characters who are preparing an invasion.
on_prepared_invasion_monthly = {
	random_events = {
		15 = 0
	}
}

#character. Fires if a prepared invasion becomes invalid.
on_prepared_invasion_aborts = {
	events = {
	}
}

#character. Fires if a prepared invasion expires.
on_prepared_invasion_expires = {
	events = {
	}
}

on_death = {
	events = {
		BRgeneralflavour.1
	}
	random_events = {
	}
}

on_merc_rampage = {
	events = {
 	}
}

on_merc_leave = {
	events = {
 	}
}

on_merc_turn_coat_from = {
	events = {
 	}
}

on_merc_turn_coat_to = {
	events = {
 	}
}

on_holy_order_leave = {
	events = {
 	}
}

#Note: Unsynchronised, this message should not execute an event which changes the gamestate to prevent out of sync
on_letter_event_message = {
	events = {
	}
}

#Note: Unsynchronised, this message should not execute an event which changes the gamestate to prevent out of sync
on_character_event_message = {
	events = {
	}
}

on_loot_settlement = {
	random_events = {
		250 = 0
	}
	events = {
	}
}

# When someone is looting currently in a province
# ROOT = Looter, FROM = Province
on_loot_province = {
	random_events = {
		49 = 0
	}
}



# Respond to a proposed change of law
on_approve_law = {
	events = {
	}
}

# Respond to a proposed change of law
councilor_on_approve_law = {
	events = {
	}
}

# Respond to a proposed change of de jure law
on_approve_de_jure_law = {
	events = {
	}
}



on_law_vote_passed = {
	events = {
	}
}

on_law_vote_failed = {
}

on_player_mercenary_income = {
	events = {
	}
}

on_outbreak = {
	events = {
	}
}


# Fires every two years for characters who are members of any society
on_society_bi_yearly_pulse = {
	events = {
	}
	
	random_events = {
		150 = 0 # Nothing
	}
}

# A character has switched their society interest
# Root = Character
# From = Society
on_character_switch_society_interest = {
	events = {
	}
}

# A character ranks up in their society, or becomes grandmaster
# Root = Character
# From = Society
on_character_society_rank_up = {
	events = {
	}
}

# A character ranks down in their society
# Root = Character
# From = Society
on_character_society_rank_down = {
	events = {
	}
}

# A character joins a society. The has_game_started trigger can be useful to avoid firing events from auto-assignment of characters at game start
# Root = Character
# From = Society
on_character_join_society = {
	events = {
	}
}

# A character leaves or is forced to leave a society
# Root = Character
# From = Society
on_character_leave_society = {
	events = {
	}
}
# A character asks to join a society. Only works on player
# Root = Character
# From = Society
on_character_ask_to_join_society = {
	events = {
	}
}

# A character is removed from society for failing the potential trigger.
# Root = Character
# From = Society
on_character_kicked_from_society = {
	events = {
	}
}

# A character stops showing interest in a society for failing the CanJoin trigger.
# Root = Character
# From = Society
on_character_stop_showing_interest = {
	events = {
	}
}

# A character selects a focus
# Root = Character
on_focus_selected = {
	events = {
		#z_class_selection.1
	}
}

